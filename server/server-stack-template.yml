Description: >
  Sumit Arora - Udagram Project

  This module stack is responsible of deploying servers.

Parameters:

  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

  InstanceType:
    Description: The instance type to use for the Private Servers
    Default: t2.medium
    Type: String
    
  InstanceAMI:
    Type: String
    Default: ami-0ac73f33a1888c64a
    Description: AMI of a Private Servers to use
  
  S3CodeBucketName:
      Description: Public S3 Bucket provided by Udacity
      Type: String
  
  S3CodeArchive:
      Description: Content of the Public S3 Bucket provided by Udacity
      Type: String

Resources:
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} SecGroup of Load Balancer

  WebAppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  Allow ssh connections from Jumpbox HOST
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-SSHSecurityGroup
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSG
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} SecGroup of EC2 instances with the webserver
  
  WebHostsAutoSG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebHostsLaunchConfig
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVATE-NETS"
      MinSize: 4
      MaxSize: 6
      DesiredCapacity: 4
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-WebHostsAutoSG
        PropagateAtLaunch: True
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True

  WebHostsLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref InstanceAMI
      IamInstanceProfile:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-InstanceProfile
      SecurityGroups:
      - !Ref WebAppSG
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
          DeleteOnTermination: true
          VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          aws ssm get-parameter --name udagramJumpboxKey --with-decryption --output text --query Parameter.Value --region ${AWS::Region} > authorized_keys
          cp ./authorized_keys /home/ubuntu/.ssh/
          chmod 700 /home/ubuntu/.ssh/authorized_keys
          cd /var/www/html
          # Copy the web application archive
          aws s3 cp s3://${S3CodeBucketName}/${S3CodeArchive} .
          # unzip the archive
          unzip -o ${S3CodeArchive}
          chown -R www-data:www-data .
          systemctl start apache2.service

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC2-SN"
      SecurityGroups:
      - Ref: LoadBalancerSG

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"      

  AppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebHostsAutoSG
      Cooldown: 60
      ScalingAdjustment: 1

  AppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebHostsAutoSG
      Cooldown: 300
      ScalingAdjustment: -1
  
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "CpuHigh"
      AlarmDescription: Scale-up if CPU usage is > 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - !Ref AppScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebHostsAutoSG

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU usage is < 60% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: LessThanThreshold
      AlarmActions:
      - !Ref AppScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebHostsAutoSG

Outputs:
 
  WebsiteURL:
    Description: DNS Name of the web application throught the Load Balancer
    Value: !Sub http://${WebAppLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}-DNS-NAME